#include "face.h"
#include <iostream>
#include <filesystem>
#include <cstdlib>
#include <fstream>

namespace fs = std::filesystem;

FaceRecognitionSystem::FaceRecognitionSystem() {
    // 确保临时目录存在
    if (!fs::exists(tmpDir)) {
        fs::create_directory(tmpDir);
    }
}

FaceRecognitionSystem::~FaceRecognitionSystem() {
    // 析构函数，可用于清理资源
}

bool FaceRecognitionSystem::loadModelsAndDatabase() {
    // 1. 加载人脸检测级联分类器
    if (!faceDetector.load(faceCascadePath)) {
        std::cerr << "无法加载人脸检测级联分类器！" << std::endl;
        std::cerr << "请确保" << faceCascadePath << "文件存在" << std::endl;
        return false;
    }
    
    // 2. 加载DNN人脸检测模型
    try {
        faceNet = cv::dnn::readNetFromONNX(faceNetModelPath);
        std::cout << "成功加载人脸检测模型" << std::endl;
    } catch (const cv::Exception& e) {
        std::cerr << "无法加载人脸检测模型: " << e.what() << std::endl;
        std::cerr << "请从OpenCV官方下载模型文件" << std::endl;
        return false;
    }
    
    // 3. 加载人脸识别模型
    try {
        facerec = cv::dnn::readNetFromONNX(facerecModelPath);
        std::cout << "成功加载人脸识别模型" << std::endl;
    } catch (const cv::Exception& e) {
        std::cerr << "无法加载人脸识别模型: " << e.what() << std::endl;
        std::cerr << "请从OpenCV官方下载模型文件" << std::endl;
        return false;
    }
    
    // 4. 尝试加载已有的人脸数据库，如果不存在则创建新的
    if (fs::exists(dbPath)) {
        if (loadFaceDatabase()) {
            std::cout << "成功加载已有人脸数据库" << std::endl;
            return true;
        }
    }
    
    // 5. 没有数据库，尝试从source/face目录构建
    std::cout << "未找到人脸数据库，尝试从" << sourceDir << "目录构建..." << std::endl;
    return buildFaceDatabase();
}

std::vector<cv::Rect> FaceRecognitionSystem::detectFacesDNN(const cv::Mat& frame) {
    std::vector<cv::Rect> faces;
    
    try {
        // 准备输入图像
        cv::Mat inputBlob = cv::dnn::blobFromImage(frame, 1.0, 
                                                  cv::Size(320, 240), 
                                                  cv::Scalar(104.0, 177.0, 123.0), 
                                                  false, false);
        
        // 设置输入并前向传递
        faceNet.setInput(inputBlob);
        cv::Mat detection = faceNet.forward();
        
        // 获取结果维度
        cv::Mat detectionMat(detection.size[2], detection.size[3], CV_32F, detection.ptr<float>());
        
        // 处理检测结果
        for (int i = 0; i < detectionMat.rows; i++) {
            float confidence = detectionMat.at<float>(i, 2);
            
            // 过滤置信度低的检测
            if (confidence > 0.5) {
                int x1 = static_cast<int>(detectionMat.at<float>(i, 3) * frame.cols);
                int y1 = static_cast<int>(detectionMat.at<float>(i, 4) * frame.rows);
                int x2 = static_cast<int>(detectionMat.at<float>(i, 5) * frame.cols);
                int y2 = static_cast<int>(detectionMat.at<float>(i, 6) * frame.rows);
                
                faces.push_back(cv::Rect(x1, y1, x2 - x1, y2 - y1));
            }
        }
    } catch (const cv::Exception& e) {
        std::cerr << "DNN人脸检测失败: " << e.what() << std::endl;
        
        // 备用方案：使用级联分类器
        cv::Mat gray;
        if (frame.channels() == 3) {
            cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);
        } else {
            gray = frame.clone();
        }
        
        faceDetector.detectMultiScale(gray, faces, 1.1, 5, 0, cv::Size(30, 30));
    }
    
    return faces;
}

std::vector<float> FaceRecognitionSystem::extractFaceFeature(const cv::Mat& face) {
    std::vector<float> feature;
    
    try {
        // 调整图像大小以适应模型输入
        cv::Mat faceBlob = cv::dnn::blobFromImage(face, 1.0/255.0, 
                                                cv::Size(112, 112), 
                                                cv::Scalar(0, 0, 0), 
                                                true, false);
        
        // 将图像设置为输入
        facerec.setInput(faceBlob);
        
        // 前向传递获取特征
        cv::Mat embeddings = facerec.forward();
        
        // 将特征复制到向量中
        feature.resize(embeddings.total());
        std::memcpy(feature.data(), embeddings.data, embeddings.total() * sizeof(float));
        
        // 规范化特征向量
        float norm = 0.0f;
        for (const auto& val : feature) {
            norm += val * val;
        }
        norm = std::sqrt(norm);
        
        for (auto& val : feature) {
            val /= norm;
        }
    } catch (const cv::Exception& e) {
        std::cerr << "提取人脸特征失败: " << e.what() << std::endl;
    }
    
    return feature;
}

float FaceRecognitionSystem::calculateSimilarity(const std::vector<float>& feature1, const std::vector<float>& feature2) {
    if (feature1.empty() || feature2.empty() || feature1.size() != feature2.size()) {
        return FLT_MAX;
    }
    
    // 余弦相似度
    float dotProduct = 0.0f;
    for (size_t i = 0; i < feature1.size(); i++) {
        dotProduct += feature1[i] * feature2[i];
    }
    
    // 由于向量已经归一化，余弦距离可以简化为
    return 1.0f - dotProduct;
}

cv::Mat FaceRecognitionSystem::alignFace(const cv::Mat& frame, cv::Rect face) {
    // 简单裁剪并调整大小
    cv::Mat faceROI;
    
    // 确保人脸框不超出图像边界
    face = face & cv::Rect(0, 0, frame.cols, frame.rows);
    if (face.width <= 0 || face.height <= 0) {
        return cv::Mat();
    }
    
    faceROI = frame(face).clone();
    
    // 调整为模型输入大小
    cv::Mat resizedFace;
    cv::resize(faceROI, resizedFace, cv::Size(112, 112));
    
    return resizedFace;
}

bool FaceRecognitionSystem::buildFaceDatabase() {
    // 清空现有数据库
    faceDatabase.clear();
    labelNames.clear();
    
    // 确保源目录存在
    if (!fs::exists(sourceDir)) {
        std::cerr << "训练图像目录不存在: " << sourceDir << std::endl;
        return false;
    }
    
    bool hasAddedFace = false;
    
    // 遍历目录中的所有文件
    for (const auto& entry : fs::directory_iterator(sourceDir)) {
        if (entry.is_regular_file()) {
            std::string filename = entry.path().filename().string();
            // 期望文件名格式为: {label}_{name}.jpg 例如 1_user1.jpg
            size_t pos = filename.find('_');
            if (pos != std::string::npos) {
                try {
                    int label = std::stoi(filename.substr(0, pos));
                    std::string name = filename.substr(pos + 1, filename.find_last_of('.') - (pos + 1));
                    
                    // 记录标签和名称的映射
                    labelNames[label] = name;
                    
                    // 读取图像
                    cv::Mat img = cv::imread(entry.path().string());
                    if (!img.empty()) {
                        if (addFaceToDatabase(name, label, img)) {
                            hasAddedFace = true;
                            std::cout << "已添加 " << name << " (标签 " << label << ") 的人脸到数据库" << std::endl;
                        }
                    } else {
                        std::cerr << "无法读取图像: " << entry.path().string() << std::endl;
                    }
                } catch (const std::exception& e) {
                    std::cerr << "处理图像时出错: " << entry.path().string() << " - " << e.what() << std::endl;
                }
            }
        }
    }
    
    if (hasAddedFace) {
        return saveFaceDatabase();
    }
    
    return false;
}

bool FaceRecognitionSystem::addFaceToDatabase(const std::string& name, int label, const cv::Mat& faceImage) {
    // 检测图像中的人脸
    std::vector<cv::Rect> faces = detectFacesDNN(faceImage);
    
    if (faces.empty()) {
        std::cerr << "无法在图像中检测到人脸" << std::endl;
        return false;
    }
    
    // 仅处理第一个检测到的人脸
    cv::Mat alignedFace = alignFace(faceImage, faces[0]);
    if (alignedFace.empty()) {
        std::cerr << "人脸对齐失败" << std::endl;
        return false;
    }
    
    // 提取人脸特征
    std::vector<float> feature = extractFaceFeature(alignedFace);
    if (feature.empty()) {
        std::cerr << "提取人脸特征失败" << std::endl;
        return false;
    }
    
    // 添加到数据库
    labelNames[label] = name;
    faceDatabase[label] = feature;
    
    return true;
}

bool FaceRecognitionSystem::saveFaceDatabase() {
    try {
        cv::FileStorage fs(dbPath, cv::FileStorage::WRITE);
        if (!fs.isOpened()) {
            std::cerr << "无法创建人脸数据库文件: " << dbPath << std::endl;
            return false;
        }
        
        fs << "num_faces" << (int)faceDatabase.size();
        
        // 保存每个人脸
        for (const auto& entry : faceDatabase) {
            int label = entry.first;
            const std::vector<float>& feature = entry.second;
            
            // 创建唯一节点名称
            std::string nodeName = "face_" + std::to_string(label);
            fs << nodeName << "{";
            fs << "label" << label;
            fs << "name" << labelNames[label];
            
            // 保存特征向量
            fs << "feature" << feature;
            
            fs << "}";
        }
        
        fs.release();
        std::cout << "成功保存人脸数据库到: " << dbPath << std::endl;
        return true;
    } catch (const std::exception& e) {
        std::cerr << "保存人脸数据库时出错: " << e.what() << std::endl;
        return false;
    }
}

bool FaceRecognitionSystem::loadFaceDatabase() {
    try {
        cv::FileStorage fs(dbPath, cv::FileStorage::READ);
        if (!fs.isOpened()) {
            std::cerr << "无法打开人脸数据库文件: " << dbPath << std::endl;
            return false;
        }
        
        // 清空当前数据库
        faceDatabase.clear();
        labelNames.clear();
        
        int numFaces = (int)fs["num_faces"];
        
        // 读取每个人脸
        for (int i = 0; i < numFaces; i++) {
            std::string nodeName = "face_" + std::to_string(i);
            
            if (!fs[nodeName].empty()) {
                int label = (int)fs[nodeName]["label"];
                std::string name = (std::string)fs[nodeName]["name"];
                
                std::vector<float> feature;
                fs[nodeName]["feature"] >> feature;
                
                if (!feature.empty()) {
                    labelNames[label] = name;
                    faceDatabase[label] = feature;
                    std::cout << "已加载 " << name << " (标签 " << label << ") 的人脸特征" << std::endl;
                }
            }
        }
        
        fs.release();
        return !faceDatabase.empty();
    } catch (const std::exception& e) {
        std::cerr << "加载人脸数据库时出错: " << e.what() << std::endl;
        return false;
    }
}

std::vector<std::pair<int, float>> FaceRecognitionSystem::recognizeFace(const cv::Mat& image) {
    std::vector<std::pair<int, float>> results;
    
    // 检测图像中的所有人脸
    std::vector<cv::Rect> faces = detectFacesDNN(image);
    
    for (const auto& face : faces) {
        // 对齐人脸
        cv::Mat alignedFace = alignFace(image, face);
        if (alignedFace.empty()) {
            continue;
        }
        
        // 提取特征
        std::vector<float> feature = extractFaceFeature(alignedFace);
        if (feature.empty()) {
            continue;
        }
        
        // 寻找最佳匹配
        int bestLabel = -1;
        float minDistance = FLT_MAX;
        
        for (const auto& entry : faceDatabase) {
            int label = entry.first;
            const std::vector<float>& dbFeature = entry.second;
            
            float distance = calculateSimilarity(feature, dbFeature);
            if (distance < minDistance) {
                minDistance = distance;
                bestLabel = label;
            }
        }
        
        results.push_back(std::make_pair(bestLabel, minDistance));
    }
    
    return results;
}

cv::Mat FaceRecognitionSystem::captureImage(bool useRaspberryPi) {
    if (useRaspberryPi) {
        return captureWithRaspberryPi();
    } else {
        // 使用OpenCV摄像头
        cv::VideoCapture cap(0);
        if (!cap.isOpened()) {
            std::cerr << "无法打开摄像头" << std::endl;
            return cv::Mat();
        }
        
        cv::Mat frame;
        cap >> frame;
        cap.release();
        
        return frame;
    }
}

cv::Mat FaceRecognitionSystem::captureWithRaspberryPi() {
    // 使用raspistill命令拍照
    std::string tmpImagePath = tmpDir + "capture.jpg";
    std::string cmd = "raspistill -o " + tmpImagePath + " -t 100";
    
    int result = std::system(cmd.c_str());
    if (result != 0) {
        std::cerr << "调用树莓派相机失败，错误代码: " << result << std::endl;
        return cv::Mat();
    }
    
    // 读取拍摄的图像
    cv::Mat image = cv::imread(tmpImagePath);
    if (image.empty()) {
        std::cerr << "无法读取拍摄的图像: " << tmpImagePath << std::endl;
    }
    
    return image;
}

std::vector<std::pair<int, float>> FaceRecognitionSystem::recognizeFromCapture(bool useRaspberryPi) {
    cv::Mat image = captureImage(useRaspberryPi);
    if (image.empty()) {
        return {};
    }
    
    // 保存捕获的图像
    std::string tmpImagePath = tmpDir + "latest_capture.jpg";
    cv::imwrite(tmpImagePath, image);
    
    return recognizeFace(image);
}

void FaceRecognitionSystem::recognizeFromCamera(bool useRaspberryPi) {
    if (useRaspberryPi) {
        // 树莓派模式：拍照并分析
        while (true) {
            cv::Mat frame = captureImage(true);
            if (frame.empty()) {
                std::cerr << "无法获取图像" << std::endl;
                break;
            }
            
            // 分析图像
            auto results = recognizeFace(frame);
            
            // 绘制结果
            std::vector<cv::Rect> faces = detectFacesDNN(frame);
            
            for (size_t i = 0; i < faces.size() && i < results.size(); i++) {
                const auto& face = faces[i];
                int label = results[i].first;
                float distance = results[i].second;
                bool recognized = (label != -1) && (distance < cosineThreshold);
                
                cv::rectangle(frame, face, recognized ? cv::Scalar(0, 255, 0) : cv::Scalar(0, 0, 255), 2);
                
                std::string name = recognized ? getLabelName(label) : "未知";
                std::string text = name + " (" + std::to_string(int((1.0f - distance) * 100)) + "%)";
                
                cv::putText(frame, text, cv::Point(face.x, face.y - 10),
                            cv::FONT_HERSHEY_SIMPLEX, 0.6, 
                            recognized ? cv::Scalar(0, 255, 0) : cv::Scalar(0, 0, 255), 2);
            }
            
            // 显示图像
            cv::imshow("人脸识别", frame);
            
            // 保存当前帧
            cv::imwrite(tmpDir + "current_frame.jpg", frame);
            
            // 按ESC键退出
            if (cv::waitKey(1000) == 27) {
                break;
            }
        }
    } else {
        // 普通摄像头模式：实时视频流
        cv::VideoCapture cap(0);
        if (!cap.isOpened()) {
            std::cerr << "无法打开摄像头" << std::endl;
            return;
        }
        
        cv::Mat frame;
        while (true) {
            cap >> frame;
            if (frame.empty()) {
                std::cerr << "无法获取图像" << std::endl;
                break;
            }
            
            // 分析图像
            auto results = recognizeFace(frame);
            
            // 绘制结果
            std::vector<cv::Rect> faces = detectFacesDNN(frame);
            
            for (size_t i = 0; i < faces.size() && i < results.size(); i++) {
                const auto& face = faces[i];
                int label = results[i].first;
                float distance = results[i].second;
                bool recognized = (label != -1) && (distance < cosineThreshold);
                
                cv::rectangle(frame, face, recognized ? cv::Scalar(0, 255, 0) : cv::Scalar(0, 0, 255), 2);
                
                std::string name = recognized ? getLabelName(label) : "未知";
                std::string text = name + " (" + std::to_string(int((1.0f - distance) * 100)) + "%)";
                
                cv::putText(frame, text, cv::Point(face.x, face.y - 10),
                            cv::FONT_HERSHEY_SIMPLEX, 0.6, 
                            recognized ? cv::Scalar(0, 255, 0) : cv::Scalar(0, 0, 255), 2);
            }
            
            // 显示图像
            cv::imshow("人脸识别", frame);
            
            // 按ESC键退出
            if (cv::waitKey(1) == 27) {
                break;
            }
        }
        
        cap.release();
        cv::destroyAllWindows();
    }
}

std::string FaceRecognitionSystem::getLabelName(int label) const {
    auto it = labelNames.find(label);
    if (it != labelNames.end()) {
        return it->second;
    }
    return "未知用户";
}
